{"version":3,"sources":["./src/app/reacrive/reacrive.component.ts","./src/app/reacrive/reacrive.component.html","./src/environments/environment.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/template-driven/template-driven.component.ts","./src/app/template-driven/template-driven.component.html","./src/app/app-routing.module.ts","./src/app/models/users.ts","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["import { Component } from '@angular/core';\nimport { AbstractControl, FormArray, FormControl, FormGroup, ValidatorFn, Validators } from '@angular/forms';\n\n@Component({\n  selector: 'app-reacrive',\n  templateUrl: './reacrive.component.html',\n  styleUrls: ['./reacrive.component.scss'],\n})\nexport class ReacriveComponent {\n  public person: FormGroup = new FormGroup({\n    name: new FormControl(null, [Validators.required, Validators.minLength(4), Validators.maxLength(15)]),\n    password: new FormControl(null, [Validators.required, this.passwordValidator()]),\n    emails: new FormArray([])\n  });\n\n  get emailsFormArray(): FormArray {\n    return this.person.get('emails') as FormArray;\n  }\n\n  addEmail(): void {\n    this.emailsFormArray.push(new FormControl(null, [Validators.required, Validators.email]));\n  }\n\n  removeControl(index: number): void {\n    this.emailsFormArray.removeAt(index);\n  }\n\n  public onSubmit(): void {\n    console.log(this.person.getRawValue());\n  }\n\n  private passwordValidator(): ValidatorFn {\n    return (control: AbstractControl): { [key: string]: boolean } | null => {\n      if (!/^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])([a-zA-Z0-9]{8})$/.test(control.value) && control.value) {\n        return { passwordIncorrect: true };\n      }\n      return null;\n    };\n  }\n}\n","<div class=\"container\">\n  <h2>Reactive forms</h2>\n  <form [formGroup]=\"person\" (ngSubmit)=\"onSubmit()\">\n    <mat-form-field class=\"example-full-width\">\n      <mat-label>Name</mat-label>\n      <input type=\"text\" matInput formControlName=\"name\"/>\n      <mat-error *ngIf=\"person.get('name')?.hasError('required')\">\n        Field name is required\n      </mat-error>\n      <mat-error *ngIf=\"person.get('name')?.hasError('minlength')\">\n        Filed name can't be less than 3 symbol\n      </mat-error>\n      <mat-error *ngIf=\"person.get('name')?.hasError('maxlength')\">\n        Filed name can't be more than 15 symbol\n      </mat-error>\n    </mat-form-field>\n    <mat-form-field class=\"example-full-width\">\n      <mat-label>Password</mat-label>\n      <input type=\"password\" matInput formControlName=\"password\"/>\n      <mat-error *ngIf=\"person.get('password')?.hasError('required')\">\n        Please enter a password\n      </mat-error>\n      <mat-error *ngIf=\"person.get('password')?.hasError('passwordIncorrect')\">\n        Password must include one upper case letter and one lower case latter and one number.\n        Password must include 8 symbols.\n      </mat-error>\n    </mat-form-field>\n    <div>\n    </div>\n    <div formArrayName=\"emails\">\n      <div class=\"emails\" *ngFor=\"let email of emailsFormArray.controls; let i = index\">\n        <mat-form-field class=\"example-full-width\">\n          <mat-label>Email</mat-label>\n          <input type=\"email\" matInput [formControlName]=\"i\">\n          <mat-error *ngIf=\"email?.hasError('required')\">\n            Email is required\n          </mat-error>\n          <mat-error *ngIf=\"email?.hasError('email')\">\n            Email is incorrect\n          </mat-error>\n        </mat-form-field>\n        <button class=\"button close__button\" mat-raised-button color=\"primary\" (click)=\"removeControl(i)\">X</button>\n      </div>\n      <button class=\"button add__button\" mat-raised-button color=\"primary\" (click)=\"addEmail()\">Add email</button>\n    </div>\n    <div class=\"actions\">\n      <button class=\"button submit__button \" [disabled]=\"person.invalid\" type=\"submit\" mat-raised-button color=\"accent\">Submit</button>\n      <button class=\"button\" type=\"reset\" mat-raised-button color=\"warn\">Reset</button>\n    </div>\n  </form>\n</div>\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title = 'task4';\n}\n","<app-template-driven></app-template-driven>\n\n<app-reacrive></app-reacrive>\n","import { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { BrowserModule } from '@angular/platform-browser';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { TemplateDrivenComponent } from './template-driven/template-driven.component';\nimport { ReacriveComponent } from './reacrive/reacrive.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    TemplateDrivenComponent,\n    ReacriveComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    FormsModule,\n    ReactiveFormsModule,\n    BrowserAnimationsModule,\n    MatInputModule,\n    MatFormFieldModule,\n    MatButtonModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Component, OnInit } from '@angular/core';\nimport { User } from '../models/users';\n\n@Component({\n  selector: 'app-template-driven',\n  templateUrl: './template-driven.component.html',\n  styleUrls: ['./template-driven.component.scss']\n})\nexport class TemplateDrivenComponent implements OnInit {\n  public user: User = new User();\n  constructor() { }\n  ngOnInit(): void {\n    this.user = {\n      id: 1,\n      email: '',\n      password: '',\n    };\n  }\n  public cleanButtonClicked(): void{\n    this.user = new User();\n  }\n  public onSubmit(): void {\n    console.log(this.user);\n  }\n}\n","<div class=\"container\">\n  <h2>Template-driven forms</h2>\n  <form #userForm=\"ngForm\" (ngSubmit)=\"onSubmit()\">\n    <div>\n      <mat-form-field class=\"example-full-width\">\n      <mat-label>Email</mat-label>\n      <input #email=\"ngModel\" type=\"email\" email required matInput [(ngModel)]=\"user.email\" name=\"email\" class=\"form-input\" id=\"email\">\n      <mat-error *ngIf=\"email?.hasError('required')\">\n        Email is required\n      </mat-error>\n      <mat-error *ngIf=\"email?.hasError('email')\">\n        Email is incorrect\n      </mat-error>\n      </mat-form-field>\n    </div>\n    <div>\n      <mat-form-field class=\"example-full-width\">\n        <mat-label>Password</mat-label>\n        <input matInput #password=\"ngModel\" minlength=\"3\" maxlength=\"8\" type=\"password\" required [(ngModel)]=\"user.password\" name=\"password\" class=\"form-input\" id=\"password\" />\n        <mat-error *ngIf=\"password.hasError('required')\">\n          Field password is required\n        </mat-error>\n        <mat-error *ngIf=\"password.hasError('minlength')\">\n          Filed password can't be less than 3 symbol\n        </mat-error>\n        <mat-error *ngIf=\"password.hasError('maxlength')\">\n          Filed password can't be more than 8 symbol\n        </mat-error>\n      </mat-form-field>\n    </div>\n    <button class=\"button submit__button \" [disabled]=\"!userForm.form.valid\" type=\"submit\" mat-raised-button color=\"accent\">Submit</button>\n    <button class=\"button\" type=\"reset\" (click)=\"cleanButtonClicked()\" mat-raised-button color=\"warn\">Reset</button>\n  </form>\n</div>\n\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\n\r\nconst routes: Routes = [];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class AppRoutingModule { }\r\n","export class User {\r\n  id: any;\r\n  email: string = '';\r\n  password: string = '';\r\n}\r\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}